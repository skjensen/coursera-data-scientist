q()
install.packages("slidify")
q()
q()
install.packages(devtools)
install.packages("devtools")
install.packages("kernsmooth")
install.packages("KernSmooth")
install.packages("slidify")
library(KernSmooth)
library("Swirl")
library("swirl")
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,
| 10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 with c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix,mymatrix2)
identical(my_matrix,my_matrix2)
patients("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
q()
library("swirl")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num =5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,  c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hello", "World")
submit()
mad_libs(place = "Ireland", adjective = "IT", noun = "R programming")
submit()
'"I" %p% "love" %p% "R!"'
"I" %p% "love" %p% "R!"
d1 <- sys.date
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
q()
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
q()
setwd("~/Git/coursera-data-scientist/Data Cleaning/Week1")
source("quiz.R")
quiz()
source("quiz.R")
quiz()
source("quiz.R")
quiz()
source("quiz.R")
quiz()
source("quiz.R")
quiz()
source("quiz.R")
quiz()
source("quiz.R")
quiz()
source("quiz.R")
quiz()
source("quiz.R")
quiz()
source("quiz.R")
quiz()
source("quiz.R")
quiz()
source("quiz.R")
quiz()
source("quiz.R")
quiz()
source("quiz.R")
quiz()
install.packages("data.table")
library(data.table)
quiz()
source("quiz.R")
quiz()
source("quiz.R")
quiz()
#Download the Excel file, and create a date variable for the file.
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile = "./data/idahoHousing.csv", mode='wb')
dateDownloaded <- date()
#Read the XML file
DT <- fread("./data/idahoHousing.csv")
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
rowMeans(DT)[DT$SEX==1]
source("quiz.R")
quiz()
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
setwd("~/Git/coursera-data-scientist/Data Cleaning/Week2")
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
a
A
h5write(A,"example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
B
attr(B,"scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
source("gitHub.R")
setwd("~/Git/coursera-data-scientist/Data Cleaning/Week2")
source("quiz.R")
question1()
install.packages("sqldf")
question1()
source("quiz.R")
question3()
source("quiz.R")
question4()
source("quiz.R")
question5()
source("quiz.R")
question5()
source("quiz.R")
question5()
library("swirl")
swirl()
library("dplyr")
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarise(by_package)
summarise(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
filter(pack_sum, count > 697)
top_counts <- filter(pack_sum, count > 697)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gether
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
submit()
?spread
submit()
extract_numeric("class5")
?mutate
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
packageVersion('dplyr')
bind_rows(passed,failed)
sat
submit()
submit()
submit()
submit()
submit()
submit()
setwd("~/Git/coursera-data-scientist/Data Cleaning/Week3")
source("quiz.R")
question1()
source("quiz.R")
question1()
source("quiz.R")
question1()
source("quiz.R")
question1()
source("quiz.R")
question1()
source("quiz.R")
question1()
source("quiz.R")
question1()
source("quiz.R")
question1()
source("quiz.R")
question1()
source("quiz.R")
question1()
?head
source("quiz.R")
?head
question1()
install.packages("jpeg")
?jpeg
source("quiz.R")
question2()
library(jpeg)
question2()
source("quiz.R")
question2()
?quantiles
?quantile
source("quiz.R")
question2()
source("quiz.R")
question2()
source("quiz.R")
question2()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source("quiz.R")
question3()
source('~/Git/coursera-data-scientist/Data Cleaning/Week3/quiz.R', echo=TRUE)
source("quiz.R")
question3()
swirl()
0
quit()
